// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  email      String
  role       Role     @default(USER)
  orders     Order[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isVerified Boolean  @default(false)
  token    VerificationToken[] @relation("UserToken")

  @@unique([email])
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String
  expiresAt DateTime
  userId    Int
  user      User     @relation("UserToken", fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([token])
}

enum Role {
  USER
  ADMIN
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  fishes    Fish[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name])
}

model Fish {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  price       Decimal
  stock       Int
  imageUrl    String?
  categoryId  Int
  category    Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orders      OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     Int
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  totalPrice Decimal
  payments   Payment[]
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

model OrderItem {
  id       Int     @id @default(autoincrement())
  orderId  Int
  order    Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  fishId   Int
  fish     Fish    @relation(fields: [fishId], references: [id], onDelete: Cascade)
  quantity Int
  price    Decimal
}

model Payment {
  id        Int           @id @default(autoincrement())
  orderId   Int
  order     Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  amount    Decimal
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}
